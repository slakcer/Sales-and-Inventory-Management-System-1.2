/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sales.and.inventory.management.system;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Utilities;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.HeadlessException;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juanm
 */
public class AddContract2 extends javax.swing.JFrame {
    private static final String username = JDBC.username;
    private static final String password = JDBC.password;
    private static final String dataConn = JDBC.dataConn;

    Connection sqlConn =null;
    PreparedStatement pst = null;
    PreparedStatement pst2 = null, pst3 = null;
    ResultSet rs=null, rs2=null,rs3=null;
    public static String SystemDate = Main.SystemDate;
    public static String userloggedin = Signin.userloggedin;
    public static int userID = Signin.userID;
    String School, SchoolAddress, SchoolTIN;
    AddContract AddContract = new AddContract();
    int SchoolID = AddContract.SchoolId;
    int InvoiceID = 0;
    int Grandamount = 0;
    JDBC db = new JDBC();
    /**
     * Creates new form AddContract2
     */
    public AddContract2() {
        initComponents();
        init();
        getDescription();
        db.Connect();   
        setBackground(new Color(0,0,0,0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        panelBorder1 = new swing.PanelBorder();
        jLabel4 = new javax.swing.JLabel();
        cboDescription = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        TogaQuantity = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        TogaUnitPrice = new javax.swing.JTextField();
        AddItem = new javax.swing.JButton();
        AddItem1 = new javax.swing.JButton();
        CreateInvoice = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();
        panelBorder2 = new swing.PanelBorder();
        jLabel1 = new javax.swing.JLabel();
        panelBorder3 = new swing.PanelBorder();
        jScrollPane1 = new javax.swing.JScrollPane();
        InvoiceTable = new swing.Table();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        panelBorder1.setBackground(new java.awt.Color(102, 255, 204));

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 51));
        jLabel4.setText("Toga Description");

        cboDescription.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        cboDescription.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboDescriptionMouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 51));
        jLabel5.setText("Quantity");

        TogaQuantity.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        TogaQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TogaQuantityActionPerformed(evt);
            }
        });
        TogaQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TogaQuantityKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 51));
        jLabel7.setText("Unit Price");

        TogaUnitPrice.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        TogaUnitPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TogaUnitPriceActionPerformed(evt);
            }
        });
        TogaUnitPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TogaUnitPriceKeyTyped(evt);
            }
        });

        AddItem.setBackground(new java.awt.Color(0, 0, 51));
        AddItem.setFont(new java.awt.Font("Roboto", 0, 27)); // NOI18N
        AddItem.setForeground(new java.awt.Color(255, 255, 255));
        AddItem.setText("Add Item");
        AddItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AddItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddItemMouseClicked(evt);
            }
        });
        AddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemActionPerformed(evt);
            }
        });

        AddItem1.setBackground(new java.awt.Color(0, 0, 51));
        AddItem1.setFont(new java.awt.Font("Roboto", 0, 27)); // NOI18N
        AddItem1.setForeground(new java.awt.Color(255, 255, 255));
        AddItem1.setText("Delete");
        AddItem1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AddItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddItem1MouseClicked(evt);
            }
        });
        AddItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItem1ActionPerformed(evt);
            }
        });

        CreateInvoice.setBackground(new java.awt.Color(0, 0, 51));
        CreateInvoice.setFont(new java.awt.Font("Roboto", 0, 27)); // NOI18N
        CreateInvoice.setForeground(new java.awt.Color(255, 255, 255));
        CreateInvoice.setText("Create Invoice");
        CreateInvoice.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CreateInvoice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CreateInvoiceMouseClicked(evt);
            }
        });
        CreateInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateInvoiceActionPerformed(evt);
            }
        });

        Cancel.setBackground(new java.awt.Color(204, 204, 204));
        Cancel.setFont(new java.awt.Font("Roboto", 0, 27)); // NOI18N
        Cancel.setForeground(new java.awt.Color(0, 0, 51));
        Cancel.setText("Cancel");
        Cancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CancelMouseClicked(evt);
            }
        });
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        panelBorder2.setBackground(new java.awt.Color(0, 0, 51));

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Create Invoice");

        javax.swing.GroupLayout panelBorder2Layout = new javax.swing.GroupLayout(panelBorder2);
        panelBorder2.setLayout(panelBorder2Layout);
        panelBorder2Layout.setHorizontalGroup(
            panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder2Layout.createSequentialGroup()
                .addGap(422, 422, 422)
                .addComponent(jLabel1)
                .addContainerGap(426, Short.MAX_VALUE))
        );
        panelBorder2Layout.setVerticalGroup(
            panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        panelBorder3.setBackground(new java.awt.Color(255, 255, 255));

        InvoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Toga ID", "Description", "Unit Price", "Quantity", "Total Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(InvoiceTable);

        javax.swing.GroupLayout panelBorder3Layout = new javax.swing.GroupLayout(panelBorder3);
        panelBorder3.setLayout(panelBorder3Layout);
        panelBorder3Layout.setHorizontalGroup(
            panelBorder3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        panelBorder3Layout.setVerticalGroup(
            panelBorder3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBorder1Layout.createSequentialGroup()
                        .addComponent(panelBorder3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(24, 24, 24)
                        .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBorder1Layout.createSequentialGroup()
                                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(AddItem1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Cancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CreateInvoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(AddItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(cboDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5)
                                .addComponent(TogaQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7)
                                .addComponent(TogaUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(panelBorder2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(panelBorder2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBorder1Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(cboDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(TogaQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(TogaUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddItem1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CreateInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelBorder1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(panelBorder3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void init(){
            InvoiceTable.fixTable(jScrollPane1);
        }
    public void getDescription()
    {
        try {
            sqlConn = DriverManager.getConnection(dataConn, username, password);
            pst = sqlConn.prepareStatement("SELECT TogaDescription FROM toga WHERE ScID = ?");
            pst.setInt(1, SchoolID);
            System.out.println(SchoolID+"asd");
            rs = pst.executeQuery();
            while (rs.next()) {
                String Description = rs.getString("TogaDescription");
                cboDescription.addItem(Description);
            }
        } catch (Exception e) {
            java.util.logging.Logger.getLogger(SalesAndInventoryManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Please contact your admin for assistance.");
        }
    }
    
    
    
    
    public final void AddToga()
    {
            try {
            String Description = (String)cboDescription.getSelectedItem();
            int Quantity = Integer.parseInt(TogaQuantity.getText());
            int Price = Integer.parseInt(TogaUnitPrice.getText());
            int TotalAmount = Quantity * Price;
            sqlConn = DriverManager.getConnection(dataConn, username, password);
            pst = sqlConn.prepareStatement("SELECT TogaID FROM toga where TogaDescription = ?");
            pst.setString(1,Description);
            rs = pst.executeQuery();
            while (rs.next()) {
                String School = rs.getString("TogaID");
                DefaultTableModel Invoice = (DefaultTableModel)InvoiceTable.getModel();
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER );
                InvoiceTable.setDefaultRenderer(Object.class, centerRenderer);
                
                Invoice.addRow(new Object[]{School,Description,Price,Quantity,TotalAmount});
            }
        } catch (NumberFormatException e) {
            java.util.logging.Logger.getLogger(SalesAndInventoryManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Please complete input of details");
        } 
          catch(Exception e){
            java.util.logging.Logger.getLogger(SalesAndInventoryManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Please contact your admin for assistance!");    
          }
            
    }
    
    
    public int getGrandAmount(int grand)
    {
        for(int i = 0; i < InvoiceTable.getRowCount(); i++)
        {
            Grandamount = Grandamount + Integer.parseInt(InvoiceTable.getValueAt(i,4).toString());
          
        }
        grand = Grandamount;
        return grand;
    }
    

    
    public void GenerateInvoice()
    {
        try{
        sqlConn = DriverManager.getConnection(dataConn,username,password);
        String BuName=null, BuEmail=null,BuTIN=null, BuAddress=null, SchoolName=null, SchoolAddress=null;
        String struserID = Integer.toString(userID);
        pst = sqlConn.prepareStatement("SELECT * FROM business_info"); 
        rs = pst.executeQuery();
            if(rs.next()){
            BuName = rs.getString("BuName");
            BuTIN = rs.getString("BuTIN");
            BuEmail = rs.getString("BuEmail");
            BuAddress = rs.getString("BuAddress");
            //needs phone number 
            }
        pst.close();
        pst = sqlConn.prepareStatement("SELECT * FROM school_client WHERE ScID = ?"); 
        pst.setInt(1, SchoolID);
        rs = pst.executeQuery();
            if(rs.next()){
            SchoolName = rs.getString("ScName"); 
            SchoolAddress = rs.getString("ScAddress"); 
            }
        pst.close();
        pst = sqlConn.prepareStatement("SELECT * FROM invoice ORDER BY InID DESC LIMIT 1");
        rs = pst.executeQuery();
        while(rs.next())
        {
            InvoiceID = rs.getInt("InID");
        }
        LocalDate Date = LocalDate.now(); 
        DateTimeFormatter dateformat = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String formatteddate = Date.format(dateformat);
        String FileName = String.format("C:\\Sales and Inventory Documents\\Invoices\\Invoice # %d.pdf",InvoiceID);
        float left = 30;
        float right = 30;
        float top = 60;
        float bottom = 0;
        Document InventoryReport = new Document(PageSize.A4, left, right, top, bottom);
        String imFile = "C:\\Users\\tapar\\OneDrive\\Documents\\NetBeansProjects\\Sales and Inventory Management System\\ReceiptLogoo.png"; 
        // Creating an Image object 
        Image image = Image.getInstance(imFile);             
        image.scaleToFit(Utilities.millimetersToPoints(110),Utilities.millimetersToPoints(110));
        image.setAlignment(Image.MIDDLE);               
        InventoryReport.setMargins(25, 25, 25, 25);
        Font title = new Font(Font.FontFamily.HELVETICA,12,Font.NORMAL,BaseColor.BLACK);
        Font strInventory = new Font(Font.FontFamily.HELVETICA,20,Font.NORMAL,BaseColor.BLACK);
        Font products = new Font(Font.FontFamily.HELVETICA,10,Font.NORMAL,BaseColor.BLACK);
        Font details = new Font(Font.FontFamily.HELVETICA,10,Font.NORMAL,BaseColor.BLACK);
        Font lineFont = new Font(Font.FontFamily.HELVETICA,18,Font.NORMAL,BaseColor.BLACK);
        Font newlineFont = new Font(Font.FontFamily.HELVETICA,8,Font.NORMAL,BaseColor.BLACK);
        Font invoicenum = new Font(Font.FontFamily.HELVETICA,20,Font.NORMAL,BaseColor.RED);
        OutputStream output = new FileOutputStream(FileName);
        PdfWriter writer = PdfWriter.getInstance(InventoryReport, output); 
        Paragraph line = new Paragraph("------------------------------------------------------------------------------------------", lineFont);
        Paragraph newline = new Paragraph("\n",newlineFont);
        Paragraph BusinessName = new Paragraph("DAN R. PEL - Prop",title);
        BusinessName.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessTIN = new Paragraph("VAT REG TIN: "+BuTIN,title);      
        BusinessTIN.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessEmail = new Paragraph(BuEmail,title);
        BusinessEmail.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessAddress = new Paragraph(BuAddress,title);
        BusinessAddress.setAlignment(Element.ALIGN_CENTER);      
        String invoice = Integer.toString(InvoiceID);
        Paragraph InvoiceNumber = new Paragraph(invoice,strInventory);
        InvoiceNumber.setAlignment(Element.ALIGN_CENTER);
        Paragraph Receive = new Paragraph("Received the above goods in good order and condition ",newlineFont);
        Receive.setAlignment(Element.ALIGN_RIGHT);
        Paragraph valid = new Paragraph("THIS INVOICE SHALL BE VALID FOR FIVE (5) YEARS FROM THE DATE OF ATP",newlineFont);
        valid.setAlignment(Element.ALIGN_CENTER);
        Paragraph devs = new Paragraph("System Developer:\nTapar, Emmanuel Christian\nNg, Juan Miguel",newlineFont);
        devs.setAlignment(Element.ALIGN_CENTER);
        //Creation of Report
        InventoryReport.open(); 
        InventoryReport.add(new Chunk(""));
        float [] columnwidth = {6f,3f,3f,2f};
        PdfPTable Inventory = new PdfPTable(4);
        Inventory.setWidthPercentage(100);
        Inventory.setWidths(columnwidth);
        PdfPCell ProdCategory = new PdfPCell(new Phrase("Articles",details));
        PdfPCell ProdCost = new PdfPCell(new Phrase("Unit Price",details));
        PdfPCell ProdUnitPrice = new PdfPCell(new Phrase("Quantity",details));
        PdfPCell ProdStock = new PdfPCell(new Phrase("Total Amount",details));
        ProdCategory.setBorder(Rectangle.BOX);
        ProdCategory.setBackgroundColor(BaseColor.LIGHT_GRAY);
        Inventory.addCell(ProdCategory).setHorizontalAlignment(Element.ALIGN_CENTER);
        ProdCost.setBorder(Rectangle.BOX);
        ProdCost.setBackgroundColor(BaseColor.LIGHT_GRAY);
        Inventory.addCell(ProdCost).setHorizontalAlignment(Element.ALIGN_CENTER);
        ProdUnitPrice.setBorder(Rectangle.BOX);
        ProdUnitPrice.setBackgroundColor(BaseColor.LIGHT_GRAY);
        Inventory.addCell(ProdUnitPrice).setHorizontalAlignment(Element.ALIGN_CENTER);
        ProdStock.setBorder(Rectangle.BOX);
        ProdStock.setBackgroundColor(BaseColor.LIGHT_GRAY);
        Inventory.addCell(ProdStock).setHorizontalAlignment(Element.ALIGN_CENTER);
        float [] columnwidth2 = {1f,1f};
        PdfPTable salesinvoice = new PdfPTable(2);
        salesinvoice.setWidthPercentage(100);
        salesinvoice.setWidths(columnwidth2);
        PdfPCell chunk = new PdfPCell(new Phrase(" ",title));
        chunk.setBorder(Rectangle.NO_BORDER);
        PdfPCell strinvoice = new PdfPCell(new Phrase("Sales Invoice",strInventory));
        strinvoice.setBorder(Rectangle.NO_BORDER);
        salesinvoice.addCell(strinvoice).setHorizontalAlignment(Element.ALIGN_LEFT);
        PdfPCell strinvoicenumber = new PdfPCell(new Phrase(invoice,invoicenum));
        strinvoicenumber.setBorder(Rectangle.NO_BORDER);
        salesinvoice.addCell(strinvoicenumber).setHorizontalAlignment(Element.ALIGN_RIGHT);
        salesinvoice.addCell(chunk);
        salesinvoice.addCell(chunk);
        PdfPCell sold = new PdfPCell(new Phrase("Sold to: "+SchoolName,title));
        sold.setBorder(Rectangle.NO_BORDER);
        salesinvoice.addCell(sold).setHorizontalAlignment(Element.ALIGN_LEFT);
        PdfPCell processed = new PdfPCell(new Phrase("Processed by: "+userloggedin,title));
        processed.setBorder(Rectangle.NO_BORDER);
        salesinvoice.addCell(processed).setHorizontalAlignment(Element.ALIGN_RIGHT);
        PdfPCell ScAddress = new PdfPCell(new Phrase("Address: "+SchoolAddress,title));
        ScAddress.setBorder(Rectangle.NO_BORDER);
        salesinvoice.addCell(ScAddress).setHorizontalAlignment(Element.ALIGN_LEFT);
        PdfPCell InDate = new PdfPCell(new Phrase("Date: "+formatteddate,title));
        InDate.setBorder(Rectangle.NO_BORDER);
        salesinvoice.addCell(InDate).setHorizontalAlignment(Element.ALIGN_RIGHT);
        float [] columnwidth3 = {1f,1f};
        PdfPTable signature = new PdfPTable(2);
        signature.setWidthPercentage(100);
        signature.setWidths(columnwidth3);    
        signature.addCell(chunk);
        PdfPCell signatory = new PdfPCell(new Phrase("By: _____________________________\n\nCashier/Authorized Representative",title));
        signatory.setBorder(Rectangle.NO_BORDER);
        signature.addCell(signatory).setHorizontalAlignment(Element.ALIGN_RIGHT);
        InventoryReport.add(image);     
        InventoryReport.add(BusinessAddress);
        InventoryReport.add(BusinessName);
        InventoryReport.add(BusinessEmail); 
        InventoryReport.add(BusinessTIN); 
        InventoryReport.add(newline);
        InventoryReport.add((Element)salesinvoice); 
        InventoryReport.add(newline);
        InventoryReport.add(newline);      
        for(int i = 0; i < InvoiceTable.getRowCount(); i++)
           {
            String Description = InvoiceTable.getValueAt(i, 1).toString();
            PdfPCell CaDescriptionCell = new PdfPCell(new Phrase(Description,products));
            CaDescriptionCell.setBorder(Rectangle.BOX);                    
            Inventory.addCell(CaDescriptionCell).setHorizontalAlignment(Element.ALIGN_CENTER);
            String UnitPrice = InvoiceTable.getValueAt(i, 2).toString();
            PdfPCell PrCostCell = new PdfPCell(new Phrase("P "+UnitPrice,products));
            PrCostCell.setBorder(Rectangle.BOX);                    
            Inventory.addCell(PrCostCell).setHorizontalAlignment(Element.ALIGN_CENTER);
            String Quantity = InvoiceTable.getValueAt(i, 3).toString();
            PdfPCell PrUnitPriceCell = new PdfPCell(new Phrase(Quantity,products));
            PrUnitPriceCell.setBorder(Rectangle.BOX);                    
            Inventory.addCell(PrUnitPriceCell).setHorizontalAlignment(Element.ALIGN_CENTER);
            String TotalAmount = InvoiceTable.getValueAt(i, 4).toString();
            PdfPCell PrStockCell = new PdfPCell(new Phrase("P"+TotalAmount,products));
            PrStockCell.setBorder(Rectangle.BOX);                    
            Inventory.addCell(PrStockCell).setHorizontalAlignment(Element.ALIGN_CENTER);
            }     
        Paragraph PaGrandTotal = new Paragraph("Total Amount Due: P "+Grandamount,title);
        PaGrandTotal.setAlignment(Element.ALIGN_RIGHT);
        InventoryReport.add((Element)Inventory);
        InventoryReport.add(line);                
        InventoryReport.add(newline);
        InventoryReport.add(PaGrandTotal);
        InventoryReport.add(newline); 
        InventoryReport.add(Receive); 
        InventoryReport.add(newline);
        InventoryReport.add(newline); 
        InventoryReport.add((Element)signature);
        InventoryReport.add(newline); 
        InventoryReport.add(valid);
        InventoryReport.add(line);
        InventoryReport.add(newline);
        InventoryReport.add(devs);
        InventoryReport.newPage();       
        InventoryReport.close();
        writer.close(); 
        JOptionPane.showMessageDialog(rootPane, "Invoice Generated");
        }        
        catch(Exception e){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void CreateInvoice()
    {
            try{
                int BuID=0;
                pst = sqlConn.prepareStatement("SELECT * FROM business_info"); 
                rs = pst.executeQuery();
                if(rs.next()){
                BuID = rs.getInt("BuID");
                }
                pst.close();
                pst = sqlConn.prepareStatement("INSERT INTO invoice (ScID, BuID, InStatus, InAmount, InDate) values (?,?,?,?,?)");  
                pst.setInt(1, SchoolID);
                pst.setInt(2, BuID);
                pst.setString(3, "Unpaid");
                getGrandAmount(Grandamount);
                pst.setInt(4, Grandamount);
                LocalDate Date = LocalDate.now();
                DateTimeFormatter dateformat = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                String formatteddate = Date.format(dateformat);
                pst.setString(5, formatteddate);
                pst.executeUpdate();
                pst.close();
            }
        catch (SQLException ex) {
            Logger.getLogger(AddContract2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void cboDescriptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboDescriptionMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cboDescriptionMouseClicked

    private void AddItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddItemMouseClicked

        
    }//GEN-LAST:event_AddItemMouseClicked

    private void AddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemActionPerformed
        AddToga();
    }//GEN-LAST:event_AddItemActionPerformed

    private void CancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelMouseClicked
        dispose();
    }//GEN-LAST:event_CancelMouseClicked

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CancelActionPerformed

    private void TogaQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TogaQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TogaQuantityActionPerformed

    private void TogaUnitPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TogaUnitPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TogaUnitPriceActionPerformed

    private void TogaUnitPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TogaUnitPriceKeyTyped
        
    }//GEN-LAST:event_TogaUnitPriceKeyTyped

    private void TogaQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TogaQuantityKeyTyped
        char a = evt.getKeyChar();
        
        if(!Character.isDigit(a))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TogaQuantityKeyTyped

    private void CreateInvoiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreateInvoiceMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_CreateInvoiceMouseClicked

    private void CreateInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateInvoiceActionPerformed
        Main.generateInvoiceFolder();
        CREATE:
        try {
            sqlConn = DriverManager.getConnection(dataConn,username, password);
            pst = sqlConn.prepareStatement("SELECT * FROM toga where ScID = ?");
            pst.setInt(1,SchoolID);
            ArrayList list = new ArrayList();
            for(int i = 0; i<InvoiceTable.getRowCount();i++)
            {                       
                list.add(InvoiceTable.getValueAt(i, 1).toString());                      
            }
            rs = pst.executeQuery();
            while(rs.next())
            {
                for(int j = 0; j < InvoiceTable.getRowCount(); j++)
                    {
                        String Description = rs.getString("TogaDescription");
                        String duplicate = InvoiceTable.getValueAt(j, 1).toString();
                        if(list.contains(Description)&&Description.equals(duplicate)){
                            int Stock = rs.getInt("TogaStock");        
                            String strQuantity = InvoiceTable.getValueAt(j, 3).toString();
                            int Quantity = Integer.parseInt(strQuantity);
                            if((Quantity<Stock&&Stock-Quantity!=0)||Stock-Quantity==0)
                            {
                            pst = sqlConn.prepareStatement("UPDATE toga SET TogaStock = ? WHERE TogaDescription = ?"); 
                            pst.setInt(1, Stock-Quantity);
                            pst.setString(2, Description);
                            pst.executeUpdate();
                            }
                            else{
                            JOptionPane.showMessageDialog(this, "Insufficient stock, please restock.");
                            break CREATE;
                            }
                        }
            }
            }
        CreateInvoice();
        GenerateInvoice();        
        Main.updateInvoice();
        Main.RentalandSellInstances();
        TogaQuantity.setText("");
        TogaUnitPrice.setText("");
        dispose();
        } catch (SQLException ex) {
            Logger.getLogger(AddContract2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_CreateInvoiceActionPerformed

    private void AddItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddItem1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_AddItem1MouseClicked

    private void AddItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItem1ActionPerformed
        DeleteItem show = new DeleteItem();
        show.setVisible(true);
    }//GEN-LAST:event_AddItem1ActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddItem;
    private javax.swing.JButton AddItem1;
    private javax.swing.JButton Cancel;
    private javax.swing.JButton CreateInvoice;
    public static swing.Table InvoiceTable;
    private javax.swing.JTextField TogaQuantity;
    private javax.swing.JTextField TogaUnitPrice;
    private javax.swing.JComboBox<String> cboDescription;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private swing.PanelBorder panelBorder1;
    private swing.PanelBorder panelBorder2;
    private swing.PanelBorder panelBorder3;
    // End of variables declaration//GEN-END:variables
}
