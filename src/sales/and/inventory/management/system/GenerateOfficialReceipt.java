/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sales.and.inventory.management.system;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Utilities;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import static sales.and.inventory.management.system.AddContract2.userID;
import static sales.and.inventory.management.system.AddContract2.userloggedin;

/**
 *
 * @author juanm
 */
public class GenerateOfficialReceipt extends javax.swing.JFrame {
    private static final String username = JDBC.username;
    private static final String password = JDBC.password;
    private static final String dataConn = JDBC.dataConn;

    Connection sqlConn =null;
    PreparedStatement pst = null;
    PreparedStatement pst2 = null, pst3 = null;
    ResultSet rs=null, rs2=null,rs3=null;
    public static String SystemDate = Main.SystemDate;
    public static String userloggedin = Signin.userloggedin;
    public static int userID = Signin.userID;
    
    /**
     * Creates new form EditInvoice
     */
    public GenerateOfficialReceipt() {
        initComponents();
        JDBC db = new JDBC();
        ButtonGroup group = new ButtonGroup();
        group.add(Cash);
        group.add(Check);       
        db.Connect();
        setBackground(new Color(0,0,0,0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBorder1 = new swing.PanelBorder();
        jLabel4 = new javax.swing.JLabel();
        InvoiceIDtxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        PaymentAmount = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        Cash = new javax.swing.JRadioButton();
        Check = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        BankName = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        CheckNumber = new javax.swing.JTextField();
        Cancel = new javax.swing.JButton();
        Generate = new javax.swing.JButton();
        panelBorder2 = new swing.PanelBorder();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        panelBorder1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 51));
        jLabel4.setText("Invoice ID");

        InvoiceIDtxt.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        InvoiceIDtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvoiceIDtxtActionPerformed(evt);
            }
        });
        InvoiceIDtxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                InvoiceIDtxtKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 51));
        jLabel5.setText("Payment Amount");

        PaymentAmount.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        PaymentAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaymentAmountActionPerformed(evt);
            }
        });
        PaymentAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PaymentAmountKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 51));
        jLabel8.setText("Payment Type");

        Cash.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        Cash.setText("Cash");
        Cash.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CashMouseClicked(evt);
            }
        });

        Check.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        Check.setText("Check");
        Check.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CheckMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 51));
        jLabel6.setText("Bank Name");

        BankName.setBackground(Color.gray);
        BankName.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        BankName.setModel(new javax.swing.DefaultComboBoxModel<>(new String []{""}));

        jLabel7.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 51));
        jLabel7.setText("Check No. (If Check is Selected)");

        CheckNumber.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        CheckNumber.setEditable(false);
        CheckNumber.setBackground(Color.gray);
        CheckNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckNumberActionPerformed(evt);
            }
        });
        CheckNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CheckNumberKeyTyped(evt);
            }
        });

        Cancel.setBackground(new java.awt.Color(204, 204, 204));
        Cancel.setFont(new java.awt.Font("Roboto", 0, 27)); // NOI18N
        Cancel.setForeground(new java.awt.Color(0, 0, 51));
        Cancel.setText("Cancel");
        Cancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CancelMouseClicked(evt);
            }
        });
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        Generate.setBackground(new java.awt.Color(207, 124, 6));
        Generate.setFont(new java.awt.Font("Roboto", 0, 27)); // NOI18N
        Generate.setForeground(new java.awt.Color(255, 255, 255));
        Generate.setText("Generate");
        Generate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Generate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GenerateMouseClicked(evt);
            }
        });
        Generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateActionPerformed(evt);
            }
        });

        panelBorder2.setBackground(new java.awt.Color(20, 30, 86));

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Generate Official Receipt");

        javax.swing.GroupLayout panelBorder2Layout = new javax.swing.GroupLayout(panelBorder2);
        panelBorder2.setLayout(panelBorder2Layout);
        panelBorder2Layout.setHorizontalGroup(
            panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );
        panelBorder2Layout.setVerticalGroup(
            panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(InvoiceIDtxt)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8)
                    .addGroup(panelBorder1Layout.createSequentialGroup()
                        .addComponent(Cash)
                        .addGap(18, 18, 18)
                        .addComponent(Check))
                    .addComponent(jLabel6)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBorder1Layout.createSequentialGroup()
                        .addComponent(Cancel)
                        .addGap(18, 18, 18)
                        .addComponent(Generate))
                    .addComponent(panelBorder2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4)
                    .addComponent(PaymentAmount)
                    .addComponent(BankName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CheckNumber))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBorder1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(panelBorder2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(InvoiceIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(PaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Cash)
                    .addComponent(Check))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(BankName, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(CheckNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Generate, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

public final void getBanks(){
            try {
            sqlConn = DriverManager.getConnection(dataConn, username, password);
            pst = sqlConn.prepareStatement("SELECT BaName FROM bank");
            rs = pst.executeQuery();
            while (rs.next()) {
                String bnk = rs.getString("BaName");
                BankName.addItem(bnk);
            }
        } catch (Exception e) {
            java.util.logging.Logger.getLogger(SalesAndInventoryManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Please contact your admin for assistance.");
        }
    }
    
public void GenerateOfficialReceiptCheck()
    {
        GENERATE:
        try{
        sqlConn = DriverManager.getConnection(dataConn,username,password);
        int InvoiceID = Integer.parseInt(InvoiceIDtxt.getText());
        int PayID=0;
        Double Payment = Double.parseDouble(PaymentAmount.getText());
        Double PartialPayment = 0.0;
        String BuName=null, BuEmail=null,BuTIN=null, BuAddress=null, BuPhone=null, SchoolName = null, 
        SchoolAddress = null, SchoolTIN = null, TotalAmountt = null, Status=null, PayDate=null, OfrNumber=null;
        String struserID = Integer.toString(userID);
        LocalDate Date = LocalDate.now(); 
        DateTimeFormatter dateformat = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        DateTimeFormatter dateformat2 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String formatteddate = Date.format(dateformat);
        String formatteddate2 = Date.format(dateformat2);
        pst = sqlConn.prepareStatement("SELECT * FROM business_info"); 
        rs = pst.executeQuery();
            if(rs.next()){
            BuName = rs.getString("BuName");
            BuTIN = rs.getString("BuTIN");
            BuEmail = rs.getString("BuEmail");
            BuAddress = rs.getString("BuAddress");
            BuPhone = rs.getString("BuPhoneNumber"); 
            }
        pst.close();
        pst = sqlConn.prepareStatement("SELECT * FROM invoice WHERE InID = "+InvoiceID+" ");
        rs = pst.executeQuery();
        int SchoolID = 0;
        if(!rs.isBeforeFirst()){
            JOptionPane.showMessageDialog(Main.frame, "Invoice doesn't exist!");
            break GENERATE;
        }
        else{
            while(rs.next())
            {
            SchoolID = rs.getInt("ScID");
            TotalAmountt = rs.getString("InAmount");   
            Status = rs.getString("InStatus");
            }
        }   
        pst.close();
        Double Total = Double.parseDouble(TotalAmountt);
        pst = sqlConn.prepareStatement("SELECT * FROM school_client WHERE ScID = "+SchoolID+" ");
        rs = pst.executeQuery();
        while(rs.next())
            {
                SchoolName = rs.getString("ScName");
                SchoolAddress = rs.getString("ScAddress");
                SchoolTIN = rs.getString("ScTIN");
            }
        pst.close();
        pst = sqlConn.prepareStatement("SELECT SUM(PayAmount) FROM payment WHERE InID = "+InvoiceID+" ");
        rs = pst.executeQuery();
        if(rs.next())
            {
                PartialPayment = rs.getDouble(1);
            }
        pst.close();
        pst = sqlConn.prepareStatement("SELECT * FROM official_receipt WHERE OfrID = (SELECT MAX(OfrID) FROM official_receipt)");
        rs = pst.executeQuery(); 
            if(rs.next()){ 
               String ofnumber = rs.getString("OfrNumber");
               int number = Integer.parseInt(ofnumber);              
                    if(number != 0){
                        number = number + 1;
                        OfrNumber = "00"+Integer.toString(number);                    
                    } 
            } 
            else{
                OfrNumber = "001";
            }
        pst.close();
        String Bank2 = (String)BankName.getSelectedItem();
        String Check2 = CheckNumber.getText();
        int BankID = 0;
        pst = sqlConn.prepareStatement("SELECT * FROM bank WHERE BaName = '"+Bank2+"'");
        rs = pst.executeQuery(); 
            if(rs.next()){ 
                BankID = rs.getInt("BaID");
            } 
            else{
                OfrNumber = "001";
            }
        pst.close();
        Double Remainder = Total - PartialPayment;
        if(Status.equals("Paid")){
            JOptionPane.showMessageDialog(Main.frame, "Invoice is already paid!");
            break GENERATE;
        }
        else{        
            if(Payment < Total && Payment > 0 && Remainder == Total){
                pst = sqlConn.prepareStatement("UPDATE invoice SET InStatus = ? WHERE InID = "+InvoiceID+"");
                pst.setString(1,"Partially Paid");
                pst.executeUpdate(); 
                pst.close();    
            }
            else if(Payment < Remainder && Payment > 0){
                pst = sqlConn.prepareStatement("UPDATE invoice SET InStatus = ? WHERE InID = "+InvoiceID+"");
                pst.setString(1,"Partially Paid");
                pst.executeUpdate(); 
                pst.close();  
            }
            else if(Payment == Total){
                pst = sqlConn.prepareStatement("UPDATE invoice SET InStatus = ? WHERE InID = "+InvoiceID+"");
                pst.setString(1,"Paid");
                pst.executeUpdate(); 
                pst.close();
            }
            else if (Payment > Total || Payment > Remainder){
                JOptionPane.showMessageDialog(Main.frame, "Payment is more than the Amount due, please input partial or full payment amount!");
                break GENERATE;
            }
            else if(Remainder-Payment==0){
                pst = sqlConn.prepareStatement("UPDATE invoice SET InStatus = ? WHERE InID = "+InvoiceID+"");
                pst.setString(1,"Paid");
                pst.executeUpdate(); 
                pst.close();
            }
            else{
                JOptionPane.showMessageDialog(Main.frame, "Insufficient Payment!");
                break GENERATE;
            }
                pst2 = sqlConn.prepareStatement("INSERT into payment(OrID, InID, PayDescription, PayAmount, PayDate, PayCheckNum) values (?,?,?,?,?,?)");
                pst2.setInt(1, 0);
                pst2.setInt(2, InvoiceID);              
                pst2.setString(3, "Check");
                pst2.setDouble(4, Payment);
                pst2.setString(5,formatteddate2);
                pst2.setInt(6,0);
                pst2.executeUpdate();
                pst2.close();
                pst = sqlConn.prepareStatement("SELECT * FROM payment WHERE InID = "+InvoiceID+" ");
                rs = pst.executeQuery();
                while(rs.next())
                {
                    PayID = rs.getInt("PayID");
                    PayDate = rs.getString("PayDate");
                }
                pst.close();
                pst = sqlConn.prepareStatement("INSERT into official_receipt(InID, PayID, BaID,OfrNumber, OfrTotalAmountDue, OfrDate) values (?,?,?,?,?,?)");
                pst.setInt(1,InvoiceID);
                pst.setInt(2,PayID);
                pst.setInt(3,BankID);
                pst.setString(4,OfrNumber);
                pst.setDouble(5,Payment);
                pst.setString(6,formatteddate2);
                pst.executeUpdate(); 
                pst.close(); 
              
        }
        String FileName = String.format("C:\\Sales and Inventory Documents\\Official Receipt\\Official Receipt # %s.pdf",OfrNumber);
        Document InventoryReport = new Document();
        String imFile = "C:\\Users\\tapar\\OneDrive\\Documents\\NetBeansProjects\\Sales and Inventory Management System\\ReceiptLogoo.png"; 
        // Creating an Image object 
        Image image = Image.getInstance(imFile);             
        image.scaleToFit(Utilities.millimetersToPoints(110),Utilities.millimetersToPoints(110));
        image.setAlignment(Image.MIDDLE);               
        InventoryReport.setMargins(25, 25, 25, 25);
        InventoryReport.setPageSize(PageSize.A4);
        Font title = new Font(Font.FontFamily.HELVETICA,12,Font.NORMAL,BaseColor.BLACK);
        Font strInventory = new Font(Font.FontFamily.HELVETICA,20,Font.NORMAL,BaseColor.BLACK);
        Font products = new Font(Font.FontFamily.HELVETICA,10,Font.NORMAL,BaseColor.BLACK);
        Font details = new Font(Font.FontFamily.HELVETICA,10,Font.NORMAL,BaseColor.BLACK);
        Font lineFont = new Font(Font.FontFamily.HELVETICA,18,Font.NORMAL,BaseColor.BLACK);
        Font newlineFont = new Font(Font.FontFamily.HELVETICA,8,Font.NORMAL,BaseColor.BLACK);
        Font invoicenum = new Font(Font.FontFamily.HELVETICA,20,Font.NORMAL,BaseColor.RED);
        OutputStream output = new FileOutputStream(FileName);
        PdfWriter writer = PdfWriter.getInstance(InventoryReport, output); 
        Paragraph line = new Paragraph("------------------------------------------------------------------------------------------", lineFont);
        Paragraph newline = new Paragraph("\n",newlineFont);
        Paragraph BusinessName = new Paragraph("DAN R. PEL - Prop.",title);
        BusinessName.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessTIN = new Paragraph("VAT REG TIN: "+BuTIN,title);      
        BusinessTIN.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessEmail = new Paragraph(BuEmail,title);
        BusinessEmail.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessPhone = new Paragraph(BuPhone,title);
        BusinessPhone.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessAddress = new Paragraph(BuAddress,title);
        BusinessAddress.setAlignment(Element.ALIGN_CENTER);
        Paragraph PaInventoryReport = new Paragraph("OFFICIAL RECEIPT",strInventory);
        PaInventoryReport.setAlignment(Element.ALIGN_CENTER);
        Paragraph Settlement = new Paragraph("IN SETTLEMENT OF THE FOLLOWING",title);
        Settlement.setAlignment(Element.ALIGN_LEFT);
        Paragraph PaymentType = new Paragraph("Payment Type: Check",title);
        PaymentType.setAlignment(Element.ALIGN_LEFT);
        Paragraph Bank = new Paragraph("Bank: "+Bank2,title);
        Bank.setAlignment(Element.ALIGN_LEFT);
        Paragraph Check = new Paragraph("Check Number: "+Check2,title);
        Check.setAlignment(Element.ALIGN_LEFT);
        Paragraph Paymentfor = new Paragraph("Payment for: Invoice #" + InvoiceID,title);
        Paymentfor.setAlignment(Element.ALIGN_LEFT);
        Paragraph PaDate = new Paragraph("Date: "+formatteddate,title);
        PaDate.setAlignment(Element.ALIGN_RIGHT);
        Paragraph Authorization = new Paragraph("Authorized by: " + userloggedin,title);
        Authorization.setAlignment(Element.ALIGN_RIGHT);
        Paragraph valid = new Paragraph("THIS OFFICIAL RECEIPT SHALL BE VALID FOR FIVE (5) YEARS FROM THE DATE OF ATP",newlineFont);
        valid.setAlignment(Element.ALIGN_CENTER);
        Paragraph devs = new Paragraph("System Developer:\nTapar, Emmanuel Christian\nNg, Juan Miguel",newlineFont);
        devs.setAlignment(Element.ALIGN_CENTER);
        //Creation of Report
        InventoryReport.open(); 
        InventoryReport.add(new Chunk(""));
        float [] columnwidth = {3f,2f,6f};
        //Table
        PdfPTable Inventory = new PdfPTable(3);
        Inventory.setWidthPercentage(100);
        Inventory.setWidths(columnwidth);
        Paragraph first = new Paragraph("Received from "+SchoolName,details);
        first.setIndentationLeft(65);
        Paragraph second = new Paragraph("and Address at "+SchoolAddress,details);
        second.setIndentationLeft(65);
        Paragraph third = new Paragraph("with TIN "+SchoolTIN+" engaged in the",details);
        third.setIndentationLeft(65);
        Paragraph fourth = new Paragraph("Bus. Style of Rental Services, the sum of",details);
        fourth.setIndentationLeft(65);
        Paragraph fifth = new Paragraph(Payment+" Pesos",details);
        fifth.setIndentationLeft(65);
        Paragraph sixth = new Paragraph("(P"+Payment+") in full/partial payment for P"+Total,details);
        sixth.setIndentationLeft(65);
        PdfPCell First = new PdfPCell();
        First.addElement(first);
        PdfPCell Second = new PdfPCell();
        Second.addElement(second);
        PdfPCell Third = new PdfPCell();
        Third.addElement(third);
        PdfPCell Fourth = new PdfPCell();
        Fourth.addElement(fourth);
        PdfPCell Fifth = new PdfPCell();
        Fifth.addElement(fifth);
        PdfPCell Sixth = new PdfPCell();
        Sixth.addElement(sixth);
        PdfPCell chunk = new PdfPCell(new Phrase(" ",title));  
        PdfPCell chunk2 = new PdfPCell(new Phrase(" ",title)); 
        chunk2.setBorder(Rectangle.NO_BORDER);
        PdfPCell Particulars = new PdfPCell(new Phrase("Particulars",details));
        PdfPCell Amount = new PdfPCell(new Phrase("Amount",details));
        PdfPCell TotalSales = new PdfPCell(new Phrase("Total Sales(VAT Inclusive)",details));
        PdfPCell LessVAT = new PdfPCell(new Phrase("Less VAT",details));
        PdfPCell Total2 = new PdfPCell(new Phrase("Total",details));
        String strTotal = Double.toString(Remainder-Payment);
        PdfPCell TotalAmount = new PdfPCell(new Phrase(strTotal,details));
        PdfPCell TotalDue = new PdfPCell(new Phrase("Total Due",details));
        PdfPCell AmountDue = new PdfPCell(new Phrase("Remaining Amount Due",details));
        PdfPCell VATableSales = new PdfPCell(new Phrase("VATable Sales",details));
        PdfPCell VATExempt = new PdfPCell(new Phrase("VAT-Exempt Sales",details));
        PdfPCell ZeroRated = new PdfPCell(new Phrase("Zero Rated Sales",details));
        PdfPCell VATAmount = new PdfPCell(new Phrase("VAT Amount",details));
        PdfPCell Totall = new PdfPCell(new Phrase("Total Sales",details));      
        Particulars.setBorder(Rectangle.BOX);
        Particulars.setBackgroundColor(BaseColor.LIGHT_GRAY);      
        Inventory.addCell(Particulars).setHorizontalAlignment(Element.ALIGN_CENTER);
        Amount.setBorder(Rectangle.BOX);
        Amount.setBackgroundColor(BaseColor.LIGHT_GRAY);
        Inventory.addCell(Amount).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk2);
        Inventory.addCell(chunk);
        Inventory.addCell(chunk);
        Inventory.addCell(chunk2);
        Inventory.addCell(chunk);
        Inventory.addCell(chunk);
        First.setBorder(Rectangle.NO_BORDER);
        Inventory.addCell(First);
        TotalSales.setBorder(Rectangle.BOX);
        Inventory.addCell(TotalSales).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);  
        Inventory.addCell(chunk2);
        LessVAT.setBorder(Rectangle.BOX);     
        Inventory.addCell(LessVAT).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);
        Second.setBorder(Rectangle.NO_BORDER);
        Inventory.addCell(Second);
        Total2.setBorder(Rectangle.BOX);
        Inventory.addCell(Total2).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);   
        Inventory.addCell(chunk2);       
        TotalDue.setBorder(Rectangle.BOX);
        Inventory.addCell(TotalDue).setHorizontalAlignment(Element.ALIGN_CENTER);
        TotalAmount.setBorder(Rectangle.BOX);
        Inventory.addCell(TotalAmount).setHorizontalAlignment(Element.ALIGN_CENTER);
        Third.setBorder(Rectangle.NO_BORDER);
        Inventory.addCell(Third);       
        AmountDue.setBorder(Rectangle.BOX);
        Inventory.addCell(AmountDue).setHorizontalAlignment(Element.ALIGN_CENTER);
        TotalAmount.setBorder(Rectangle.BOX);
        Inventory.addCell(TotalAmount).setHorizontalAlignment(Element.ALIGN_CENTER);            
        Inventory.addCell(chunk2);           
        Inventory.addCell(chunk);
        Inventory.addCell(chunk);
        Fourth.setBorder(Rectangle.NO_BORDER);
        Inventory.addCell(Fourth);  
        VATableSales.setBorder(Rectangle.BOX);
        Inventory.addCell(VATableSales).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);
        Inventory.addCell(chunk2);
        VATExempt.setBorder(Rectangle.BOX);
        Inventory.addCell(VATExempt).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);
        Fifth.setBorder(Rectangle.NO_BORDER);
        Inventory.addCell(Fifth); 
        ZeroRated.setBorder(Rectangle.BOX);
        Inventory.addCell(ZeroRated).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);
        Inventory.addCell(chunk2);
        VATAmount.setBorder(Rectangle.BOX);
        Inventory.addCell(VATAmount).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);
        Sixth.setBorder(Rectangle.NO_BORDER);
        Inventory.addCell(Sixth); 
        Totall.setBorder(Rectangle.BOX);
        Inventory.addCell(Totall).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);
        Inventory.addCell(chunk2);
        float [] columnwidth2 = {1f,1f};
        PdfPTable salesinvoice = new PdfPTable(2);
        salesinvoice.setWidthPercentage(100);
        salesinvoice.setWidths(columnwidth2);
        salesinvoice.addCell(chunk2);
        PdfPCell strinvoicenumber = new PdfPCell(new Phrase(OfrNumber,invoicenum));
        strinvoicenumber.setBorder(Rectangle.NO_BORDER);
        salesinvoice.addCell(strinvoicenumber).setHorizontalAlignment(Element.ALIGN_RIGHT);
        salesinvoice.addCell(chunk2);
        salesinvoice.addCell(chunk2);
        PdfPCell processed = new PdfPCell(new Phrase("Processed by: "+userloggedin,title));
        processed.setBorder(Rectangle.NO_BORDER);
        salesinvoice.addCell(processed).setHorizontalAlignment(Element.ALIGN_LEFT);
        PdfPCell InDate = new PdfPCell(new Phrase("Date: "+formatteddate,title));
        InDate.setBorder(Rectangle.NO_BORDER);
        salesinvoice.addCell(InDate).setHorizontalAlignment(Element.ALIGN_RIGHT);
        float [] columnwidth3 = {1f,1f};
        PdfPTable signature = new PdfPTable(2);
        signature.setWidthPercentage(100);
        signature.setWidths(columnwidth3);    
        signature.addCell(chunk2);
        PdfPCell signatory = new PdfPCell(new Phrase("By: _____________________________\n\nAuthorized Signature/Representative",title));
        signatory.setBorder(Rectangle.NO_BORDER);
        signature.addCell(signatory).setHorizontalAlignment(Element.ALIGN_RIGHT);
        InventoryReport.add(image);   
        InventoryReport.add(BusinessAddress);
        InventoryReport.add(BusinessName); 
        InventoryReport.add(BusinessEmail); 
        InventoryReport.add(BusinessPhone);
        InventoryReport.add(BusinessTIN); 
        InventoryReport.add(PaInventoryReport);
        InventoryReport.add(newline);
        InventoryReport.add((Element)salesinvoice);
        InventoryReport.add(Settlement); 
        InventoryReport.add(newline);         
        PaDate.setAlignment(Element.ALIGN_LEFT);
        InventoryReport.add((Element)Inventory);
        InventoryReport.add(newline);
        InventoryReport.add(PaymentType);
        InventoryReport.add(Bank);
        InventoryReport.add(Check);
        InventoryReport.add(Paymentfor); 
        InventoryReport.add(newline);
        InventoryReport.add((Element)signature);
        InventoryReport.add(newline);
        InventoryReport.add(valid);
        InventoryReport.add(newline);
        InventoryReport.add(line);
        InventoryReport.add(devs);
        InventoryReport.newPage();       
        InventoryReport.close();
        writer.close();
        JOptionPane.showMessageDialog(rootPane, "Official Receipt Generated!");
        }

        catch(Exception e){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void GenerateOfficialReceiptCash()
    {
        GENERATE:
        try{
        sqlConn = DriverManager.getConnection(dataConn,username,password);
        int InvoiceID = Integer.parseInt(InvoiceIDtxt.getText());
        int PayID=0;
        Double Payment = Double.parseDouble(PaymentAmount.getText());
        Double PartialPayment = 0.0;
        String BuName=null, BuEmail=null,BuTIN=null, BuAddress=null, BuPhoneNumber=null, SchoolName = null, 
        SchoolAddress = null, SchoolTIN = null, TotalAmountt = null, Status=null, PayDate=null, OfrNumber=null;
        String struserID = Integer.toString(userID);
        LocalDate Date = LocalDate.now(); 
        DateTimeFormatter dateformat = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        DateTimeFormatter dateformat2 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String formatteddate = Date.format(dateformat);
        String formatteddate2 = Date.format(dateformat2);
        pst = sqlConn.prepareStatement("SELECT * FROM business_info"); 
        rs = pst.executeQuery();
            if(rs.next()){
            BuName = rs.getString("BuName");
            BuTIN = rs.getString("BuTIN");
            BuEmail = rs.getString("BuEmail");
            BuAddress = rs.getString("BuAddress");
            BuPhoneNumber = rs.getString("BuPhoneNumber");
            //needs phone number 
            }
        pst.close();
        pst = sqlConn.prepareStatement("SELECT * FROM invoice WHERE InID = "+InvoiceID+" ");
        rs = pst.executeQuery();
        int SchoolID = 0;
        if(!rs.isBeforeFirst()){
            JOptionPane.showMessageDialog(Main.frame, "Invoice doesn't exist!");
            break GENERATE;
        }
        else{
            while(rs.next())
            {
            SchoolID = rs.getInt("ScID");
            TotalAmountt = rs.getString("InAmount");   
            Status = rs.getString("InStatus");
            }
        }   
        pst.close();
        Double Total = Double.parseDouble(TotalAmountt);
        pst = sqlConn.prepareStatement("SELECT * FROM school_client WHERE ScID = "+SchoolID+" ");
        rs = pst.executeQuery();
        while(rs.next())
            {
                SchoolName = rs.getString("ScName");
                SchoolAddress = rs.getString("ScAddress");
                SchoolTIN = rs.getString("ScTIN");
            }
        pst.close();
        pst = sqlConn.prepareStatement("SELECT SUM(PayAmount) FROM payment WHERE InID = "+InvoiceID+" ");
        rs = pst.executeQuery();
        if(rs.next())
            {
                PartialPayment = rs.getDouble(1);
            }
        pst.close();
        pst = sqlConn.prepareStatement("SELECT * FROM official_receipt WHERE OfrID = (SELECT MAX(OfrID) FROM official_receipt)");
        rs = pst.executeQuery(); 
            if(rs.next()){ 
               String ofnumber = rs.getString("OfrNumber");
               int number = Integer.parseInt(ofnumber);              
                    if(number != 0){
                        number = number + 1;
                        OfrNumber = "00"+Integer.toString(number);                    
                    } 
            } 
            else{
                OfrNumber = "001";
            }
        pst.close();
        Double Remainder = Total - PartialPayment;
        if(Status.equals("Paid")){
            JOptionPane.showMessageDialog(Main.frame, "Invoice is already paid!");
            break GENERATE;
        }
        else{        
            if(Payment < Total && Payment > 0 && Remainder == Total){
                pst = sqlConn.prepareStatement("UPDATE invoice SET InStatus = ? WHERE InID = "+InvoiceID+"");
                pst.setString(1,"Partially Paid");
                pst.executeUpdate(); 
                pst.close();    
            }
            else if(Payment < Remainder && Payment > 0){
                pst = sqlConn.prepareStatement("UPDATE invoice SET InStatus = ? WHERE InID = "+InvoiceID+"");
                pst.setString(1,"Partially Paid");
                pst.executeUpdate(); 
                pst.close();  
            }
            else if(Payment == Total){
                pst = sqlConn.prepareStatement("UPDATE invoice SET InStatus = ? WHERE InID = "+InvoiceID+"");
                pst.setString(1,"Paid");
                pst.executeUpdate(); 
                pst.close();
            }
            else if (Payment > Total || Payment > Remainder){
                JOptionPane.showMessageDialog(Main.frame, "Payment is more than the Amount due, please input partial or full payment amount!");
                break GENERATE;
            }
            else if(Remainder-Payment==0){
                pst = sqlConn.prepareStatement("UPDATE invoice SET InStatus = ? WHERE InID = "+InvoiceID+"");
                pst.setString(1,"Paid");
                pst.executeUpdate(); 
                pst.close();
            }
            else{
                JOptionPane.showMessageDialog(Main.frame, "Insufficient Payment!");
                break GENERATE;
            }
                pst2 = sqlConn.prepareStatement("INSERT into payment(OrID, InID, PayDescription, PayAmount, PayDate, PayCheckNum) values (?,?,?,?,?,?)");
                pst2.setInt(1, 0);
                pst2.setInt(2, InvoiceID);              
                pst2.setString(3, "Cash");
                pst2.setDouble(4, Payment);
                pst2.setString(5,formatteddate2);
                pst2.setInt(6,0);
                pst2.executeUpdate();
                pst2.close();  
                pst = sqlConn.prepareStatement("SELECT * FROM payment WHERE InID = "+InvoiceID+" ");
                rs = pst.executeQuery();
                if(rs.next())
                {
                PayID = rs.getInt("PayID");
                PayDate = rs.getString("PayDate");
                }
                pst.close();
                pst = sqlConn.prepareStatement("INSERT into official_receipt(InID, PayID, BaID,OfrNumber, OfrTotalAmountDue, OfrDate) values (?,?,?,?,?,?)");
                pst.setInt(1,InvoiceID);
                pst.setInt(2,PayID);
                pst.setInt(3,0);
                pst.setString(4,OfrNumber);
                pst.setDouble(5,Payment);
                pst.setString(6,formatteddate2);
                pst.executeUpdate(); 
                pst.close(); 
              
        }
        String FileName = String.format("C:\\Sales and Inventory Documents\\Official Receipt\\Official Receipt # %s.pdf",OfrNumber);
        Document InventoryReport = new Document();
        String imFile = "C:\\Users\\tapar\\OneDrive\\Documents\\NetBeansProjects\\Sales and Inventory Management System\\ReceiptLogoo.png"; 
        // Creating an Image object 
        Image image = Image.getInstance(imFile);             
        image.scaleToFit(Utilities.millimetersToPoints(110),Utilities.millimetersToPoints(110));
        image.setAlignment(Image.MIDDLE);               
        InventoryReport.setMargins(25, 25, 25, 25);
        InventoryReport.setPageSize(PageSize.A4);
        Font title = new Font(Font.FontFamily.HELVETICA,12,Font.NORMAL,BaseColor.BLACK);
        Font strInventory = new Font(Font.FontFamily.HELVETICA,20,Font.NORMAL,BaseColor.BLACK);
        Font products = new Font(Font.FontFamily.HELVETICA,10,Font.NORMAL,BaseColor.BLACK);
        Font details = new Font(Font.FontFamily.HELVETICA,10,Font.NORMAL,BaseColor.BLACK);
        Font lineFont = new Font(Font.FontFamily.HELVETICA,18,Font.NORMAL,BaseColor.BLACK);
        Font newlineFont = new Font(Font.FontFamily.HELVETICA,8,Font.NORMAL,BaseColor.BLACK);
        Font invoicenum = new Font(Font.FontFamily.HELVETICA,20,Font.NORMAL,BaseColor.RED);
        OutputStream output = new FileOutputStream(FileName);
        PdfWriter writer = PdfWriter.getInstance(InventoryReport, output); 
        Paragraph line = new Paragraph("------------------------------------------------------------------------------------------", lineFont);
        Paragraph newline = new Paragraph("\n",newlineFont);
        Paragraph BusinessName = new Paragraph("DAN R. PEL - Prop.",title);
        BusinessName.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessTIN = new Paragraph("VAT REG TIN: "+BuTIN,title);      
        BusinessTIN.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessEmail = new Paragraph(BuEmail,title);
        BusinessEmail.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessAddress = new Paragraph(BuAddress,title);
        BusinessAddress.setAlignment(Element.ALIGN_CENTER);
        Paragraph PaInventoryReport = new Paragraph("OFFICIAL RECEIPT",strInventory);
        PaInventoryReport.setAlignment(Element.ALIGN_CENTER);
        Paragraph Settlement = new Paragraph("IN SETTLEMENT OF THE FOLLOWING",title);
        Settlement.setAlignment(Element.ALIGN_LEFT);
        Paragraph PaymentType = new Paragraph("Payment Type: Cash",title);
        PaymentType.setAlignment(Element.ALIGN_LEFT);
        Paragraph Bank = new Paragraph("Bank: N/A",title);
        Bank.setAlignment(Element.ALIGN_LEFT);
        Paragraph Check = new Paragraph("Check Number: N/A",title);
        Check.setAlignment(Element.ALIGN_LEFT);
        Paragraph Paymentfor = new Paragraph("Payment for: Invoice #" + InvoiceID,title);
        Paymentfor.setAlignment(Element.ALIGN_LEFT);
        Paragraph PaDate = new Paragraph("Date: "+formatteddate,title);
        PaDate.setAlignment(Element.ALIGN_RIGHT);
        Paragraph Authorization = new Paragraph("Authorized by: " + userloggedin,title);
        Authorization.setAlignment(Element.ALIGN_RIGHT);
        Paragraph valid = new Paragraph("THIS OFFICIAL RECEIPT SHALL BE VALID FOR FIVE (5) YEARS FROM THE DATE OF ATP",newlineFont);
        valid.setAlignment(Element.ALIGN_CENTER);
        Paragraph devs = new Paragraph("System Developer:\nTapar, Emmanuel Christian\nNg, Juan Miguel",newlineFont);
        devs.setAlignment(Element.ALIGN_CENTER);
        //Creation of Report
        InventoryReport.open(); 
        InventoryReport.add(new Chunk(""));
        float [] columnwidth = {3f,2f,6f};
        //Table
        PdfPTable Inventory = new PdfPTable(3);
        Inventory.setWidthPercentage(100);
        Inventory.setWidths(columnwidth);
        Paragraph first = new Paragraph("Received from "+SchoolName,details);
        first.setIndentationLeft(65);
        Paragraph second = new Paragraph("and Address at "+SchoolAddress,details);
        second.setIndentationLeft(65);
        Paragraph third = new Paragraph("with TIN "+SchoolTIN+" engaged in the",details);
        third.setIndentationLeft(65);
        Paragraph fourth = new Paragraph("Bus. Style of Rental Services, the sum of",details);
        fourth.setIndentationLeft(65);
        Paragraph fifth = new Paragraph(Payment+" Pesos",details);
        fifth.setIndentationLeft(65);
        Paragraph sixth = new Paragraph("(P"+Payment+") in full/partial payment for P"+Total,details);
        sixth.setIndentationLeft(65);
        PdfPCell First = new PdfPCell();
        First.addElement(first);
        PdfPCell Second = new PdfPCell();
        Second.addElement(second);
        PdfPCell Third = new PdfPCell();
        Third.addElement(third);
        PdfPCell Fourth = new PdfPCell();
        Fourth.addElement(fourth);
        PdfPCell Fifth = new PdfPCell();
        Fifth.addElement(fifth);
        PdfPCell Sixth = new PdfPCell();
        Sixth.addElement(sixth);
        PdfPCell chunk = new PdfPCell(new Phrase(" ",title));  
        PdfPCell chunk2 = new PdfPCell(new Phrase(" ",title)); 
        chunk2.setBorder(Rectangle.NO_BORDER);
        PdfPCell Particulars = new PdfPCell(new Phrase("Particulars",details));
        PdfPCell Amount = new PdfPCell(new Phrase("Amount",details));
        PdfPCell TotalSales = new PdfPCell(new Phrase("Total Sales(VAT Inclusive)",details));
        PdfPCell LessVAT = new PdfPCell(new Phrase("Less VAT",details));
        PdfPCell Total2 = new PdfPCell(new Phrase("Total",details));
        String strTotal = Double.toString(Remainder-Payment);
        PdfPCell TotalAmount = new PdfPCell(new Phrase(strTotal,details));
        PdfPCell TotalDue = new PdfPCell(new Phrase("Total Due",details));
        PdfPCell AmountDue = new PdfPCell(new Phrase("Remaining Amount Due",details));
        PdfPCell VATableSales = new PdfPCell(new Phrase("VATable Sales",details));
        PdfPCell VATExempt = new PdfPCell(new Phrase("VAT-Exempt Sales",details));
        PdfPCell ZeroRated = new PdfPCell(new Phrase("Zero Rated Sales",details));
        PdfPCell VATAmount = new PdfPCell(new Phrase("VAT Amount",details));
        PdfPCell Totall = new PdfPCell(new Phrase("Total Sales",details));      
        Particulars.setBorder(Rectangle.BOX);
        Particulars.setBackgroundColor(BaseColor.LIGHT_GRAY);      
        Inventory.addCell(Particulars).setHorizontalAlignment(Element.ALIGN_CENTER);
        Amount.setBorder(Rectangle.BOX);
        Amount.setBackgroundColor(BaseColor.LIGHT_GRAY);
        Inventory.addCell(Amount).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk2);
        Inventory.addCell(chunk);
        Inventory.addCell(chunk);
        Inventory.addCell(chunk2);
        Inventory.addCell(chunk);
        Inventory.addCell(chunk);
        First.setBorder(Rectangle.NO_BORDER);
        Inventory.addCell(First);
        TotalSales.setBorder(Rectangle.BOX);
        Inventory.addCell(TotalSales).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);  
        Inventory.addCell(chunk2);
        LessVAT.setBorder(Rectangle.BOX);     
        Inventory.addCell(LessVAT).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);
        Second.setBorder(Rectangle.NO_BORDER);
        Inventory.addCell(Second);
        Total2.setBorder(Rectangle.BOX);
        Inventory.addCell(Total2).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);   
        Inventory.addCell(chunk2);       
        TotalDue.setBorder(Rectangle.BOX);
        Inventory.addCell(TotalDue).setHorizontalAlignment(Element.ALIGN_CENTER);
        TotalAmount.setBorder(Rectangle.BOX);
        Inventory.addCell(TotalAmount).setHorizontalAlignment(Element.ALIGN_CENTER);
        Third.setBorder(Rectangle.NO_BORDER);
        Inventory.addCell(Third);       
        AmountDue.setBorder(Rectangle.BOX);
        Inventory.addCell(AmountDue).setHorizontalAlignment(Element.ALIGN_CENTER);
        TotalAmount.setBorder(Rectangle.BOX);
        Inventory.addCell(TotalAmount).setHorizontalAlignment(Element.ALIGN_CENTER);            
        Inventory.addCell(chunk2);           
        Inventory.addCell(chunk);
        Inventory.addCell(chunk);
        Fourth.setBorder(Rectangle.NO_BORDER);
        Inventory.addCell(Fourth);  
        VATableSales.setBorder(Rectangle.BOX);
        Inventory.addCell(VATableSales).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);
        Inventory.addCell(chunk2);
        VATExempt.setBorder(Rectangle.BOX);
        Inventory.addCell(VATExempt).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);
        Fifth.setBorder(Rectangle.NO_BORDER);
        Inventory.addCell(Fifth); 
        ZeroRated.setBorder(Rectangle.BOX);
        Inventory.addCell(ZeroRated).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);
        Inventory.addCell(chunk2);
        VATAmount.setBorder(Rectangle.BOX);
        Inventory.addCell(VATAmount).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);
        Sixth.setBorder(Rectangle.NO_BORDER);
        Inventory.addCell(Sixth); 
        Totall.setBorder(Rectangle.BOX);
        Inventory.addCell(Totall).setHorizontalAlignment(Element.ALIGN_CENTER);
        Inventory.addCell(chunk);
        Inventory.addCell(chunk2);
        float [] columnwidth2 = {1f,1f};
        PdfPTable salesinvoice = new PdfPTable(2);
        salesinvoice.setWidthPercentage(100);
        salesinvoice.setWidths(columnwidth2);
        salesinvoice.addCell(chunk2);
        PdfPCell strinvoicenumber = new PdfPCell(new Phrase(OfrNumber,invoicenum));
        strinvoicenumber.setBorder(Rectangle.NO_BORDER);
        salesinvoice.addCell(strinvoicenumber).setHorizontalAlignment(Element.ALIGN_RIGHT);
        salesinvoice.addCell(chunk2);
        salesinvoice.addCell(chunk2);
        PdfPCell processed = new PdfPCell(new Phrase("Processed by: "+userloggedin,title));
        processed.setBorder(Rectangle.NO_BORDER);
        salesinvoice.addCell(processed).setHorizontalAlignment(Element.ALIGN_LEFT);
        PdfPCell InDate = new PdfPCell(new Phrase("Date: "+formatteddate,title));
        InDate.setBorder(Rectangle.NO_BORDER);
        salesinvoice.addCell(InDate).setHorizontalAlignment(Element.ALIGN_RIGHT);
        float [] columnwidth3 = {1f,1f};
        PdfPTable signature = new PdfPTable(2);
        signature.setWidthPercentage(100);
        signature.setWidths(columnwidth3);    
        signature.addCell(chunk2);
        PdfPCell signatory = new PdfPCell(new Phrase("By: _____________________________\n\nAuthorized Signature/Representative",title));
        signatory.setBorder(Rectangle.NO_BORDER);
        signature.addCell(signatory).setHorizontalAlignment(Element.ALIGN_RIGHT);
        InventoryReport.add(image);   
        InventoryReport.add(BusinessAddress);
        InventoryReport.add(BusinessName); 
        InventoryReport.add(BusinessEmail); 
        InventoryReport.add(BusinessTIN); 
        InventoryReport.add(PaInventoryReport);
        InventoryReport.add(newline);
        InventoryReport.add((Element)salesinvoice);
        InventoryReport.add(Settlement); 
        InventoryReport.add(newline);         
        PaDate.setAlignment(Element.ALIGN_LEFT);
        InventoryReport.add((Element)Inventory);
        InventoryReport.add(newline);
        InventoryReport.add(PaymentType);
        InventoryReport.add(Bank);
        InventoryReport.add(Check);
        InventoryReport.add(Paymentfor); 
        InventoryReport.add(newline);
        InventoryReport.add((Element)signature);
        InventoryReport.add(newline);
        InventoryReport.add(valid);
        InventoryReport.add(newline);
        InventoryReport.add(line);
        InventoryReport.add(devs);
        InventoryReport.newPage();       
        InventoryReport.close();
        writer.close();
        JOptionPane.showMessageDialog(rootPane, "Official Receipt Generated!");
        }

        catch(Exception e){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    private void GenerateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GenerateMouseClicked

        dispose();
    }//GEN-LAST:event_GenerateMouseClicked

    
    private void GenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateActionPerformed
            Main.generateOfficialReceiptFolder();
            if(Cash.isSelected())
            {
                GenerateOfficialReceiptCash();  
                Main.updateInvoice();
                dispose();
            }
        
            else if(Check.isSelected())
            {
                GenerateOfficialReceiptCheck();
                Main.updateInvoice();
                dispose();
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "Please choose your payment type");
            }
        
        
        
        
        
    }//GEN-LAST:event_GenerateActionPerformed

    private void CancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelMouseClicked

        dispose();
    }//GEN-LAST:event_CancelMouseClicked

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CancelActionPerformed

    private void InvoiceIDtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvoiceIDtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InvoiceIDtxtActionPerformed

    private void InvoiceIDtxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InvoiceIDtxtKeyTyped
        char a = evt.getKeyChar();
        
        if(!Character.isDigit(a))
        {
            evt.consume();
        }
    }//GEN-LAST:event_InvoiceIDtxtKeyTyped

    private void PaymentAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaymentAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PaymentAmountActionPerformed

    private void PaymentAmountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PaymentAmountKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PaymentAmountKeyTyped

    private void CheckNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckNumberActionPerformed

    private void CheckNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CheckNumberKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckNumberKeyTyped

    private void CashMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CashMouseClicked
        CheckNumber.setEditable(false);
        CheckNumber.setBackground(Color.gray);
        BankName.setBackground(Color.gray);
        BankName.setModel(new javax.swing.DefaultComboBoxModel<>(new String []{""}));
    }//GEN-LAST:event_CashMouseClicked

    private void CheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckMouseClicked
        CheckNumber.setEditable(true);
        CheckNumber.setBackground(Color.white);
        getBanks();
    }//GEN-LAST:event_CheckMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> BankName;
    private javax.swing.JButton Cancel;
    private javax.swing.JRadioButton Cash;
    private javax.swing.JRadioButton Check;
    private javax.swing.JTextField CheckNumber;
    private javax.swing.JButton Generate;
    private javax.swing.JTextField InvoiceIDtxt;
    private javax.swing.JTextField PaymentAmount;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private swing.PanelBorder panelBorder1;
    private swing.PanelBorder panelBorder2;
    // End of variables declaration//GEN-END:variables
}
