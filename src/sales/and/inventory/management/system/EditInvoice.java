/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sales.and.inventory.management.system;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Utilities;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import static sales.and.inventory.management.system.AddContract2.userID;
import static sales.and.inventory.management.system.AddContract2.userloggedin;

/**
 *
 * @author juanm
 */
public class EditInvoice extends javax.swing.JFrame {
    private static final String username = JDBC.username;
    private static final String password = JDBC.password;
    private static final String dataConn = JDBC.dataConn;

    Connection sqlConn =null;
    PreparedStatement pst = null;
    PreparedStatement pst2 = null, pst3 = null;
    ResultSet rs=null, rs2=null,rs3=null;
    public static String SystemDate = Main.SystemDate;
    public static String userloggedin = Signin.userloggedin;
    public static int userID = Signin.userID;
    
    /**
     * Creates new form EditInvoice
     */
    public EditInvoice() {
        initComponents();
        JDBC db = new JDBC();
        ButtonGroup group = new ButtonGroup();
        group.add(Cash);
        group.add(Check);
        getBanks();
        db.Connect();
        setBackground(new Color(0,0,0,0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBorder1 = new swing.PanelBorder();
        jLabel4 = new javax.swing.JLabel();
        InvoiceIDtxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        PaymentAmount = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        Cash = new javax.swing.JRadioButton();
        Check = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        BankName = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        CheckNumber = new javax.swing.JTextField();
        Cancel = new javax.swing.JButton();
        Generate = new javax.swing.JButton();
        panelBorder2 = new swing.PanelBorder();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        panelBorder1.setBackground(new java.awt.Color(102, 255, 204));
        panelBorder1.setForeground(new java.awt.Color(102, 255, 204));

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 51));
        jLabel4.setText("Invoice ID");

        InvoiceIDtxt.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        InvoiceIDtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvoiceIDtxtActionPerformed(evt);
            }
        });
        InvoiceIDtxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                InvoiceIDtxtKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 51));
        jLabel5.setText("Payment Amount");

        PaymentAmount.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        PaymentAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaymentAmountActionPerformed(evt);
            }
        });
        PaymentAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PaymentAmountKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 51));
        jLabel8.setText("Payment Type");

        Cash.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        Cash.setText("Cash");
        Cash.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CashMouseClicked(evt);
            }
        });

        Check.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        Check.setText("Check");
        Check.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CheckMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 51));
        jLabel6.setText("Bank Name");

        BankName.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 51));
        jLabel7.setText("Check No.");

        CheckNumber.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        CheckNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckNumberActionPerformed(evt);
            }
        });
        CheckNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CheckNumberKeyTyped(evt);
            }
        });

        Cancel.setBackground(new java.awt.Color(204, 204, 204));
        Cancel.setFont(new java.awt.Font("Roboto", 0, 27)); // NOI18N
        Cancel.setForeground(new java.awt.Color(0, 0, 51));
        Cancel.setText("Cancel");
        Cancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CancelMouseClicked(evt);
            }
        });
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        Generate.setBackground(new java.awt.Color(0, 0, 51));
        Generate.setFont(new java.awt.Font("Roboto", 0, 27)); // NOI18N
        Generate.setForeground(new java.awt.Color(255, 255, 255));
        Generate.setText("Generate");
        Generate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Generate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GenerateMouseClicked(evt);
            }
        });
        Generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateActionPerformed(evt);
            }
        });

        panelBorder2.setBackground(new java.awt.Color(0, 0, 51));

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Generate Official Receipt");

        javax.swing.GroupLayout panelBorder2Layout = new javax.swing.GroupLayout(panelBorder2);
        panelBorder2.setLayout(panelBorder2Layout);
        panelBorder2Layout.setHorizontalGroup(
            panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBorder2Layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );
        panelBorder2Layout.setVerticalGroup(
            panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CheckNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelBorder1Layout.createSequentialGroup()
                            .addGap(278, 278, 278)
                            .addComponent(Cancel)
                            .addGap(18, 18, 18)
                            .addComponent(Generate))
                        .addGroup(panelBorder1Layout.createSequentialGroup()
                            .addGap(23, 23, 23)
                            .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(panelBorder2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(PaymentAmount)
                                    .addComponent(InvoiceIDtxt)
                                    .addGroup(panelBorder1Layout.createSequentialGroup()
                                        .addComponent(Cash)
                                        .addGap(18, 18, 18)
                                        .addComponent(Check))
                                    .addComponent(BankName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(panelBorder2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(InvoiceIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(PaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Cash)
                    .addComponent(Check))
                .addGap(27, 27, 27)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(BankName, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(CheckNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Generate, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public final void getBanks(){
            try {
            sqlConn = DriverManager.getConnection(dataConn, username, password);
            pst = sqlConn.prepareStatement("SELECT BaName FROM bank");
            rs = pst.executeQuery();
            while (rs.next()) {
                String bnk = rs.getString("BaName");
                BankName.addItem(bnk);
            }
        } catch (Exception e) {
            java.util.logging.Logger.getLogger(SalesAndInventoryManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Please contact your admin for assistance.");
        }
    }
    
   
    public void GenerateOfficialReceiptCash()
    {
        try{
        sqlConn = DriverManager.getConnection(dataConn,username,password);
        int InvoiceID = Integer.parseInt(InvoiceIDtxt.getText());
        Double Payment = Double.parseDouble(PaymentAmount.getText());
        String BuName=null, BuEmail=null,BuTIN=null, BuAddress=null, SchoolName = null, SchoolAddress = null, SchoolTIN = null, TotalAmountt = null;
        String struserID = Integer.toString(userID);
        pst = sqlConn.prepareStatement("SELECT * FROM business_info"); 
        rs = pst.executeQuery();
            if(rs.next()){
            BuName = rs.getString("BuName");
            BuTIN = rs.getString("BuTIN");
            BuEmail = rs.getString("BuEmail");
            BuAddress = rs.getString("BuAddress");
            //needs phone number 
            }
        pst.close();

        pst = sqlConn.prepareStatement("SELECT * FROM invoice WHERE InID = "+InvoiceID+" ");
        rs = pst.executeQuery();
        while(rs.next())
        {
            int SchoolID = rs.getInt("ScID");
            TotalAmountt = rs.getString("InAmount");
            pst = sqlConn.prepareStatement("SELECT * FROM school_client WHERE ScID = "+SchoolID+" ");
            rs = pst.executeQuery();
            while(rs.next())
            {
                SchoolName = rs.getString("ScName");
                SchoolAddress = rs.getString("ScAddress");
                SchoolTIN = rs.getString("ScTIN");
            }
        }
        
        pst = sqlConn.prepareStatement("UPDATE invoice SET InStatus = ? WHERE InID = "+InvoiceID+"");
        pst.setString(1,"Paid");
        pst.executeUpdate();
        
        LocalDate Date = LocalDate.now(); 
        DateTimeFormatter dateformat = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String formatteddate = Date.format(dateformat);
        String FileName = String.format("C:\\Users\\juanm\\OneDrive\\Desktop\\Official Receipts\\Official Receipt # %d.pdf",InvoiceID);
        float left = 30;
        float right = 30;
        float top = 60;
        float bottom = 0;
        Document InventoryReport = new Document(PageSize.A4, left, right, top, bottom);
        String imFile = "C:\\Users\\juanm\\OneDrive\\Documents\\NetBeansProjects\\Sales and Inventory Management System\\ReceiptLogoo.png"; 
        // Creating an Image object 
        Image image = Image.getInstance(imFile);             
        image.scaleToFit(Utilities.millimetersToPoints(110),Utilities.millimetersToPoints(110));
        image.setAlignment(Image.MIDDLE);               
        InventoryReport.setMargins(25, 25, 25, 25);
        Font title = new Font(Font.FontFamily.HELVETICA,12,Font.NORMAL,BaseColor.BLACK);
        Font strInventory = new Font(Font.FontFamily.HELVETICA,20,Font.NORMAL,BaseColor.BLACK);
        Font products = new Font(Font.FontFamily.HELVETICA,10,Font.NORMAL,BaseColor.BLACK);
        Font details = new Font(Font.FontFamily.HELVETICA,10,Font.NORMAL,BaseColor.BLACK);
        Font lineFont = new Font(Font.FontFamily.HELVETICA,18,Font.NORMAL,BaseColor.BLACK);
        Font newlineFont = new Font(Font.FontFamily.HELVETICA,8,Font.NORMAL,BaseColor.BLACK);
        OutputStream output = new FileOutputStream(FileName);
        PdfWriter writer = PdfWriter.getInstance(InventoryReport, output); 
        Paragraph line = new Paragraph("------------------------------------------------------------------------------------------", lineFont);
        Paragraph newline = new Paragraph("\n",newlineFont);
        Paragraph BusinessName = new Paragraph("DanPel Elegance",title);
        BusinessName.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessTIN = new Paragraph("VAT REG TIN: "+BuTIN,title);      
        BusinessTIN.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessEmail = new Paragraph(BuEmail,title);
        BusinessEmail.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessAddress = new Paragraph(BuAddress,title);
        BusinessAddress.setAlignment(Element.ALIGN_CENTER);
        Paragraph PaInventoryReport = new Paragraph("OFFICIAL RECEIPT",strInventory);
        PaInventoryReport.setAlignment(Element.ALIGN_CENTER);
        Paragraph Settlement = new Paragraph("IN SETTLEMENT OF THE FOLLOWING",title);
        Settlement.setAlignment(Element.ALIGN_LEFT);
        Paragraph PaymentType = new Paragraph("Payment Type: Cash",title);
        PaymentType.setAlignment(Element.ALIGN_LEFT);
        Paragraph School = new Paragraph("School: " + SchoolName,title);
        School.setAlignment(Element.ALIGN_LEFT);
        Paragraph Address = new Paragraph("Address: " + SchoolAddress,title);
        Address.setAlignment(Element.ALIGN_LEFT);
        Paragraph TIN = new Paragraph("TIN: " + SchoolTIN,title);
        TIN.setAlignment(Element.ALIGN_LEFT);
        Paragraph TotalAmountParagraph = new Paragraph("Total Amount Due: " + TotalAmountt,title);
        TotalAmountParagraph.setAlignment(Element.ALIGN_LEFT);
        Paragraph BusStyle = new Paragraph("Bus. Style:",title);
        BusStyle.setAlignment(Element.ALIGN_LEFT);
        Paragraph TotalPayment = new Paragraph("Payment: P " + Payment,title);
        TotalPayment.setAlignment(Element.ALIGN_LEFT);
        Paragraph Paymentfor = new Paragraph("Payment for: Invoice #" + InvoiceID,title);
        Paymentfor.setAlignment(Element.ALIGN_LEFT);
        Paragraph PaDate = new Paragraph("Date: "+formatteddate,title);
        PaDate.setAlignment(Element.ALIGN_RIGHT);
        Paragraph Authorization = new Paragraph("Authorized by: " + userloggedin,title);
        Authorization.setAlignment(Element.ALIGN_RIGHT);
        Paragraph devs = new Paragraph("System Developer:\nTapar, Emmanuel Christian\nNg, Juan Miguel",newlineFont);
        devs.setAlignment(Element.ALIGN_CENTER);

        
        String TogaID;
            int u = InvoiceID % 10;
            int tt = InvoiceID / 10;
            int t = tt % 10;
            int h = InvoiceID/100;
            String uw[]={"","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"};
            String tw[]={"","Ten","Twenty","Thirty","Fourty","Fifty","Sixty","Seventy","Eighty","Ninety"};
            String hw=" Hundred ";
            if(InvoiceID<20)
                TogaID = uw[InvoiceID];
            else if(InvoiceID<100)
                TogaID = tw[t]+"_"+uw[u];
            else 
                TogaID = uw[h]+hw+tw[t]+"_"+uw[u];
        //Creation of Report
        InventoryReport.open(); 
        InventoryReport.add(new Chunk(""));
        float [] columnwidth = {6f,4f};
        PdfPTable Inventory = new PdfPTable(2);
        Inventory.setWidthPercentage(100);
        Inventory.setWidths(columnwidth);
        PdfPCell ProdName = new PdfPCell(new Phrase("Particulars",details));
        PdfPCell ProdCategory = new PdfPCell(new Phrase("Total Amount",details));
        ProdName.setBorder(Rectangle.BOX);
        ProdName.setBackgroundColor(BaseColor.LIGHT_GRAY);
        Inventory.addCell(ProdName).setHorizontalAlignment(Element.ALIGN_CENTER);
        ProdCategory.setBorder(Rectangle.BOX);
        ProdCategory.setBackgroundColor(BaseColor.LIGHT_GRAY);
        Inventory.addCell(ProdCategory).setHorizontalAlignment(Element.ALIGN_CENTER);
        InventoryReport.add(image);
        InventoryReport.add(BusinessName); 
        InventoryReport.add(BusinessAddress);
        InventoryReport.add(BusinessEmail); 
        InventoryReport.add(BusinessTIN); 
        InventoryReport.add(PaInventoryReport);
        InventoryReport.add(newline);
        InventoryReport.add(PaDate);
        InventoryReport.add(Settlement); 
        InventoryReport.add(newline);
        
        pst = sqlConn.prepareStatement("SELECT * FROM togaordertable WHERE Invoice_ID = ?");
        pst.setInt(1,InvoiceID);
        rs = pst.executeQuery();
        while(rs.next())
           {
            String Description = rs.getString("Description"); 
            PdfPCell PrNameCell = new PdfPCell(new Phrase(Description,products));
            PrNameCell.setBorder(Rectangle.BOX);                    
            Inventory.addCell(PrNameCell).setHorizontalAlignment(Element.ALIGN_CENTER);
          
            String TotalAmount = rs.getString("Total_Amount");
            PdfPCell PrStockCell = new PdfPCell(new Phrase("P " + TotalAmount,products));
            PrStockCell.setBorder(Rectangle.BOX);                    
            Inventory.addCell(PrStockCell).setHorizontalAlignment(Element.ALIGN_CENTER);
            }     
        PaDate.setAlignment(Element.ALIGN_LEFT);
        InventoryReport.add((Element)Inventory);
        InventoryReport.add(newline);
        InventoryReport.add(School);
        InventoryReport.add(Address);
        InventoryReport.add(TIN);
        InventoryReport.add(TotalAmountParagraph);
        InventoryReport.add(TotalPayment);
        InventoryReport.add(PaymentType);
        InventoryReport.add(Paymentfor); 
        InventoryReport.add(newline);
        InventoryReport.add(Authorization);
        InventoryReport.add(newline);
        InventoryReport.add(newline);
        InventoryReport.add(line);
        InventoryReport.add(devs);
        InventoryReport.newPage();       
        InventoryReport.close();
        writer.close(); 
        }

        catch(Exception e){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    private void GenerateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GenerateMouseClicked

        dispose();
    }//GEN-LAST:event_GenerateMouseClicked

    public void GenerateOfficialReceiptCheck()
    {
        try{
        sqlConn = DriverManager.getConnection(dataConn,username,password);
        int InvoiceID = Integer.parseInt(InvoiceIDtxt.getText());
        Double Payment = Double.parseDouble(PaymentAmount.getText());
        String BuName=null, BuEmail=null,BuTIN=null, BuAddress=null, SchoolName = null, SchoolAddress = null, SchoolTIN = null, TotalAmountt = null;
        String struserID = Integer.toString(userID);
        pst = sqlConn.prepareStatement("SELECT * FROM business_info"); 
        rs = pst.executeQuery();
            if(rs.next()){
            BuName = rs.getString("BuName");
            BuTIN = rs.getString("BuTIN");
            BuEmail = rs.getString("BuEmail");
            BuAddress = rs.getString("BuAddress");
            //needs phone number 
            }
        pst.close();

        pst = sqlConn.prepareStatement("SELECT * FROM invoice WHERE InID = "+InvoiceID+" ");
        rs = pst.executeQuery();
        while(rs.next())
        {
            int SchoolID = rs.getInt("ScID");
            TotalAmountt = rs.getString("InAmount");
            pst = sqlConn.prepareStatement("SELECT * FROM school_client WHERE ScID = "+SchoolID+" ");
            rs = pst.executeQuery();
            while(rs.next())
            {
                SchoolName = rs.getString("ScName");
                SchoolAddress = rs.getString("ScAddress");
                SchoolTIN = rs.getString("ScTIN");
            }
        }
        
        pst = sqlConn.prepareStatement("UPDATE invoice SET InStatus = ? WHERE InID = "+InvoiceID+"");
        pst.setString(1,"Paid");
        pst.executeUpdate();
        
        String BankNameItem = (String) BankName.getSelectedItem();
       
        LocalDate Date = LocalDate.now(); 
        DateTimeFormatter dateformat = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String formatteddate = Date.format(dateformat);
        String FileName = String.format("C:\\Users\\juanm\\OneDrive\\Desktop\\Official Receipts\\Official Receipt # %d.pdf",InvoiceID);
        float left = 30;
        float right = 30;
        float top = 60;
        float bottom = 0;
        Document InventoryReport = new Document(PageSize.A4, left, right, top, bottom);
        String imFile = "C:\\Users\\juanm\\OneDrive\\Documents\\NetBeansProjects\\Sales and Inventory Management System\\ReceiptLogoo.png"; 
        // Creating an Image object 
        Image image = Image.getInstance(imFile);             
        image.scaleToFit(Utilities.millimetersToPoints(110),Utilities.millimetersToPoints(110));
        image.setAlignment(Image.MIDDLE);               
        InventoryReport.setMargins(25, 25, 25, 25);
        Font title = new Font(Font.FontFamily.HELVETICA,12,Font.NORMAL,BaseColor.BLACK);
        Font strInventory = new Font(Font.FontFamily.HELVETICA,20,Font.NORMAL,BaseColor.BLACK);
        Font products = new Font(Font.FontFamily.HELVETICA,10,Font.NORMAL,BaseColor.BLACK);
        Font details = new Font(Font.FontFamily.HELVETICA,10,Font.NORMAL,BaseColor.BLACK);
        Font lineFont = new Font(Font.FontFamily.HELVETICA,18,Font.NORMAL,BaseColor.BLACK);
        Font newlineFont = new Font(Font.FontFamily.HELVETICA,8,Font.NORMAL,BaseColor.BLACK);
        OutputStream output = new FileOutputStream(FileName);
        PdfWriter writer = PdfWriter.getInstance(InventoryReport, output); 
        Paragraph line = new Paragraph("------------------------------------------------------------------------------------------", lineFont);
        Paragraph newline = new Paragraph("\n",newlineFont);
        Paragraph BusinessName = new Paragraph("DanPel Elegance",title);
        BusinessName.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessTIN = new Paragraph("VAT REG TIN: "+BuTIN,title);      
        BusinessTIN.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessEmail = new Paragraph(BuEmail,title);
        BusinessEmail.setAlignment(Element.ALIGN_CENTER);
        Paragraph BusinessAddress = new Paragraph(BuAddress,title);
        BusinessAddress.setAlignment(Element.ALIGN_CENTER);
        Paragraph PaInventoryReport = new Paragraph("OFFICIAL RECEIPT",strInventory);
        PaInventoryReport.setAlignment(Element.ALIGN_CENTER);
        Paragraph Settlement = new Paragraph("IN SETTLEMENT OF THE FOLLOWING",title);
        Settlement.setAlignment(Element.ALIGN_LEFT);
        Paragraph PaymentType = new Paragraph("Payment Type: Check",title);
        PaymentType.setAlignment(Element.ALIGN_LEFT);
        Paragraph Bank = new Paragraph("Bank: " + BankNameItem,title);
        Bank.setAlignment(Element.ALIGN_LEFT);
        Paragraph Check = new Paragraph("Check Number: " + CheckNumber.getText(),title);
        Check.setAlignment(Element.ALIGN_LEFT);
        Paragraph School = new Paragraph("School: " + SchoolName,title);
        School.setAlignment(Element.ALIGN_LEFT);
        Paragraph Address = new Paragraph("Address: " + SchoolAddress,title);
        Address.setAlignment(Element.ALIGN_LEFT);
        Paragraph TIN = new Paragraph("TIN: " + SchoolTIN,title);
        TIN.setAlignment(Element.ALIGN_LEFT);
        Paragraph TotalAmountParagraph = new Paragraph("Total Amount Due: " + TotalAmountt,title);
        TotalAmountParagraph.setAlignment(Element.ALIGN_LEFT);
        Paragraph BusStyle = new Paragraph("Bus. Style:",title);
        BusStyle.setAlignment(Element.ALIGN_LEFT);
        Paragraph TotalPayment = new Paragraph("Payment: P " + Payment,title);
        TotalPayment.setAlignment(Element.ALIGN_LEFT);
        Paragraph Paymentfor = new Paragraph("Payment for: Invoice #" + InvoiceID,title);
        Paymentfor.setAlignment(Element.ALIGN_LEFT);
        Paragraph PaDate = new Paragraph("Date: "+formatteddate,title);
        PaDate.setAlignment(Element.ALIGN_RIGHT);
        Paragraph Authorization = new Paragraph("Authorized by: " + userloggedin,title);
        Authorization.setAlignment(Element.ALIGN_RIGHT);
        Paragraph devs = new Paragraph("System Developer:\nTapar, Emmanuel Christian\nNg, Juan Miguel",newlineFont);
        devs.setAlignment(Element.ALIGN_CENTER);

        
        String TogaID;
            int u = InvoiceID % 10;
            int tt = InvoiceID / 10;
            int t = tt % 10;
            int h = InvoiceID/100;
            String uw[]={"","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"};
            String tw[]={"","Ten","Twenty","Thirty","Fourty","Fifty","Sixty","Seventy","Eighty","Ninety"};
            String hw=" Hundred ";
            if(InvoiceID<20)
                TogaID = uw[InvoiceID];
            else if(InvoiceID<100)
                TogaID = tw[t]+"_"+uw[u];
            else 
                TogaID = uw[h]+hw+tw[t]+"_"+uw[u];
        //Creation of Report
        InventoryReport.open(); 
        InventoryReport.add(new Chunk(""));
        float [] columnwidth = {6f,4f};
        PdfPTable Inventory = new PdfPTable(2);
        Inventory.setWidthPercentage(100);
        Inventory.setWidths(columnwidth);
        PdfPCell ProdName = new PdfPCell(new Phrase("Particulars",details));
        PdfPCell ProdCategory = new PdfPCell(new Phrase("Total Amount",details));
        ProdName.setBorder(Rectangle.BOX);
        ProdName.setBackgroundColor(BaseColor.LIGHT_GRAY);
        Inventory.addCell(ProdName).setHorizontalAlignment(Element.ALIGN_CENTER);
        ProdCategory.setBorder(Rectangle.BOX);
        ProdCategory.setBackgroundColor(BaseColor.LIGHT_GRAY);
        Inventory.addCell(ProdCategory).setHorizontalAlignment(Element.ALIGN_CENTER);
        InventoryReport.add(image);
        InventoryReport.add(BusinessName); 
        InventoryReport.add(BusinessAddress);
        InventoryReport.add(BusinessEmail); 
        InventoryReport.add(BusinessTIN); 
        InventoryReport.add(PaInventoryReport);
        InventoryReport.add(newline);
        InventoryReport.add(PaDate);
        InventoryReport.add(Settlement); 
        InventoryReport.add(newline);
        
        pst = sqlConn.prepareStatement("SELECT * FROM togaordertable where Invoice_ID = ?");
        pst.setInt(1,InvoiceID);
        rs = pst.executeQuery();
        while(rs.next())
           {
            String Description = rs.getString("Description"); 
            PdfPCell PrNameCell = new PdfPCell(new Phrase(Description,products));
            PrNameCell.setBorder(Rectangle.BOX);                    
            Inventory.addCell(PrNameCell).setHorizontalAlignment(Element.ALIGN_CENTER);
          
            String TotalAmount = rs.getString("Total_Amount");
            PdfPCell PrStockCell = new PdfPCell(new Phrase("P " + TotalAmount,products));
            PrStockCell.setBorder(Rectangle.BOX);                    
            Inventory.addCell(PrStockCell).setHorizontalAlignment(Element.ALIGN_CENTER);
            }     
        PaDate.setAlignment(Element.ALIGN_LEFT);
        InventoryReport.add((Element)Inventory);
        InventoryReport.add(newline);
        InventoryReport.add(School);
        InventoryReport.add(Address);
        InventoryReport.add(TIN);
        InventoryReport.add(TotalAmountParagraph);
        InventoryReport.add(TotalPayment);
        InventoryReport.add(PaymentType);
        InventoryReport.add(Bank);
        InventoryReport.add(Check);
        InventoryReport.add(Paymentfor); 
        InventoryReport.add(newline);
        InventoryReport.add(Authorization);
        InventoryReport.add(newline);
        InventoryReport.add(newline);
        InventoryReport.add(line);
        InventoryReport.add(devs);
        InventoryReport.newPage();       
        InventoryReport.close();
        writer.close(); 
        }

        catch(Exception e){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    private void GenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateActionPerformed
        
            if(Cash.isSelected())
            {
                GenerateOfficialReceiptCash();
                JOptionPane.showMessageDialog(rootPane, "Official Receipt Generated");
                dispose();
            }
        
            else if(Check.isSelected())
            {
                GenerateOfficialReceiptCheck();
                JOptionPane.showMessageDialog(rootPane, "Official Receipt Generated");
                dispose();
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "Please choose your payment type");
            }
        
        
        
        
        
    }//GEN-LAST:event_GenerateActionPerformed

    private void CancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelMouseClicked

        dispose();
    }//GEN-LAST:event_CancelMouseClicked

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CancelActionPerformed

    private void InvoiceIDtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvoiceIDtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InvoiceIDtxtActionPerformed

    private void InvoiceIDtxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InvoiceIDtxtKeyTyped
        char a = evt.getKeyChar();
        
        if(!Character.isDigit(a))
        {
            evt.consume();
        }
    }//GEN-LAST:event_InvoiceIDtxtKeyTyped

    private void PaymentAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaymentAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PaymentAmountActionPerformed

    private void PaymentAmountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PaymentAmountKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PaymentAmountKeyTyped

    private void CheckNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckNumberActionPerformed

    private void CheckNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CheckNumberKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckNumberKeyTyped

    private void CashMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CashMouseClicked
        CheckNumber.setEditable(false);
        CheckNumber.setBackground(Color.gray);
    }//GEN-LAST:event_CashMouseClicked

    private void CheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckMouseClicked
        CheckNumber.setEditable(true);
        CheckNumber.setBackground(Color.white);
    }//GEN-LAST:event_CheckMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> BankName;
    private javax.swing.JButton Cancel;
    private javax.swing.JRadioButton Cash;
    private javax.swing.JRadioButton Check;
    private javax.swing.JTextField CheckNumber;
    private javax.swing.JButton Generate;
    private javax.swing.JTextField InvoiceIDtxt;
    private javax.swing.JTextField PaymentAmount;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private swing.PanelBorder panelBorder1;
    private swing.PanelBorder panelBorder2;
    // End of variables declaration//GEN-END:variables
}
